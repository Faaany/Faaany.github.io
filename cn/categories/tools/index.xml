<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tools on Fanli&#39;s Blog</title>
    <link>https://faaany.github.io/cn/categories/tools/</link>
    <description>Recent content in Tools on Fanli&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Sep 2020 00:12:15 +0200</lastBuildDate>
    
	<atom:link href="https://faaany.github.io/cn/categories/tools/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker入门</title>
      <link>https://faaany.github.io/cn/posts/docker/</link>
      <pubDate>Sun, 06 Sep 2020 00:12:15 +0200</pubDate>
      
      <guid>https://faaany.github.io/cn/posts/docker/</guid>
      <description>软件开发最麻烦的事情，就是环境配置。因为用户计算机的环境都不同， 比如说，不同的操作系统，不同的安装过的库和组件， 而软件开发过程中经常会用到软件相关的库和组件，所以，当把软件安装到另一个机器上的时候，第一步要做的事情往往就是配置环境变量。但是环境配置非常麻烦，而且换一台机器，就需要重来一次。所以，有人就想到，能不能从根本上解决问题，比如说，软件可以自带环境安装。这样在安装的时候，就可以把原始环境一模一样地复制过来。
虚拟机 其实就是带环境安装的一种解决方案，它是在一个操作系统上运行另一种操作系统。但是这个方案有很多缺点，比如它会占用系统很多资源，比如内存和硬盘空间。虚拟机在运行的时候，其他程序就无法使用这些资源，哪怕虚拟机里面的应用程序占用内存的资源才1MB，虚拟机依旧需要几百MB的内存才能够运行。其他的缺点还冗余步骤多以及启动慢。
由于虚拟机的这些缺点，Linux发展出了另一种虚拟化技术：Linux容器。它不是模拟一个完整的操作系统，而是对进程进行隔离。正是由于这个特点，容器相比虚拟机有很多优势，比如启动快，因为容器里面的应用，直接就是底层系统的一个进程，启动容器就相当于启动本机的一个进程，而不是启动一个操作系统，速度就快很多。其次，就是占用资源少，容器只占用需要的资源，不占用那些没有用到的资源。最后就是体积小，相比虚拟机。
Docker属于Linux容器的一种封装，提供简单易用的容器接口，它是目前最流行的Linux容器解决方案。
 Docker将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运动，就好像是在真实的物理机上运行一样。有了Docker，就不用担心环境问题。
 Docker的用途 主要有三大类：
 提供一次性的环境。比如本地测试他人的软件，持续集成的时候提供单元测试和构建的环境。 提供弹性的云服务。因为Docker容器可以随开随关，很适合动态扩容和缩容 组建微服务架构。通过多个容器，一台机器可以跑多个服务，因此在本机就可以模拟出微服务架构。  Image文件 Docker把应用程序及其依赖，打包在Image文件里，这是一个二进制文件。只有通过这个文件，才可以生成Docker容器。同一个Image文件，可以生成多个同时运行的容器实例。
 实际开发中，一个Image文件往往是通过继承另一个Image文件，加上一些个性化设置而生成。
 Image文件是通用的，一台机器的Image文件拷贝到另一台机器上，照样可以使用。一般来说，为了节省时间，我们应该尽可能地使用别人制作好的Image文件，而不是从零开始制作。
 为了方便共享，Image文件制作完成之后，可以上传到网上的仓库。Docker的官方仓库Docker Hub 是最重要，最常用的image仓库。
 从官网上抓取Image文件，运行下面的命令：
docker image pull hello-world 之后可以通过
docker image ls 查看本机的所有image文件
如果要运行某个文件
docker container run hello-world 上面的命令具有自动抓取Image文件的功能。如果发现本地没有指定的Image文件，它就会从官网仓库上直接抓取，所以docker image pull不是必须的。
有些容器在运行之后就会自动终止，因为提供的是服务。但是有些，比如Ubuntu的Image
docker container run -it ubuntu bash 是不会自动终止的。所以，需要手动终止：
docker container kill [containerID] 要删除某个image文件
docker rmi [imageID] 容器文件 Image文件生成的容器实例，本身也是一个文件，成为容器文件。也就说，一旦容器生产，就会同时存在两个文件：Image文件和容器文件。而且关闭容器并不会删除容器文件，只是容器停止运行而已。 如果要删除容器文件：
docker container rm [containerID] 如果要列出所有的容器：</description>
    </item>
    
  </channel>
</rss>